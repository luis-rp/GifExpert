{"version":3,"sources":["reportWebVitals.ts","components/AddCategory.tsx","helpers/getGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGif.tsx","GifExpertApp.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","item","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","setTimeout","useFetchGif","GifExpertApp","props","categories","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCLDQ,EAAc,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,cAAyB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAgBlD,OACI,uBAAMC,SARU,SAACC,GACjBA,EAAEC,iBAGFN,GAAc,SAACO,GAAD,OAAyBL,GAAzB,mBAAuCK,QAIrD,UACI,8CACA,uBAEAC,KAAK,OACLC,MAAOP,EACPQ,SApBkB,SAACL,GAInBF,EAAcE,EAAEM,OAAOF,c,+BCXtBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,qDAEwCC,UAAUH,GAFlD,sDAGCI,MAAOF,GAHR,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAGDC,EAAOD,EAAKE,KAAI,SAACC,GAElB,MAAO,CACJC,GAAGD,EAAKC,GACRC,MAAMF,EAAKE,MACXV,IAAIQ,EAAKG,OAAOC,iBAAiBZ,QAZvB,kBAgBdM,GAhBc,4CAAH,sDCMNO,EAAc,SAAC,GAAyB,EAAxBJ,GAAyB,IAAtBC,EAAqB,EAArBA,MAAMV,EAAe,EAAfA,IAClC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAsB,IAArBnB,EAAoB,EAApBA,SAAoB,ECJlB,SAACA,GAAqB,IAAD,EAEvBZ,mBAAS,CAC9BmB,KAAK,GACLa,SAAQ,IAJoC,mBAEzCC,EAFyC,KAEnCC,EAFmC,KAqBhD,OAfQC,qBAAU,WAGNxB,EAAOC,GAAUpB,MAAK,SAAC4C,GACnBC,YAAW,WAEPH,EAAS,CACLf,KAAKiB,EACLJ,SAAQ,MAEd,UAGf,IAEIC,EDZoBK,CAAY1B,GAA5BO,EALkC,EAKlCA,KAAKa,EAL6B,EAK7BA,QAIZ,OACJ,qCACQ,6BAAKpB,IACL,sBAAKgB,UAAU,YAAf,UACGI,GAAW,8CAEdb,EAAKE,KAAI,SAACC,GAAD,OAED,cAAC,EAAD,eAEIA,GADCA,EAAKC,cElBbgB,EAAe,SAACC,GAAkB,IAAD,EAENxC,mBAAS,CAAC,YAAY,QAFhB,mBAEnCyC,EAFmC,KAEvB1C,EAFuB,KAO1C,OACI,gCAEI,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACK0C,EAAWpB,KAAI,SAACT,EAAS8B,GAAV,OAEf,cAAC,EAAD,CAAS9B,SAAUA,GAAeA,YCfnD+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.e6ca533d.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React ,{ChangeEvent, FormEvent, useState} from 'react'\ninterface Props {\n    setCategories:Function\n}\nexport const AddCategory = ({setCategories}:Props) => {\n    \n    const [inputValue, setinputValue] = useState(\"\")\n    const handleInputChange = (e:ChangeEvent<\n        HTMLInputElement> ):void =>{\n      \n            \n            setinputValue(e.target.value);\n    }\n    const handleSubmit =(e:FormEvent) =>{\n        e.preventDefault();\n       // console.log(setCategories);\n        \n        setCategories((cats:Array<string>)=>  [inputValue,...cats]);\n        \n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2 >Add Category</h2>\n            <input \n            \n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n","export const getGif = async (category:string) => {\n    \n    const url = `https://api.giphy.com/v1/stickers/search?q=${encodeURI(category)}&api_key=Oq3AJsEu4y1R7kz49w9cJ8nd9Wc6A5Oo`;\n    const resp = await fetch (url);\n    const {data} = await resp.json();\n    \n    \n    const gifs = data.map((item:any)=>{\n        \n         return {\n            id:item.id,\n            title:item.title,\n            url:item.images.downsized_medium.url\n        } \n\n    }) \n return gifs;\n}\n","import React from 'react'\ninterface  Props{\n    id:string,\n    title:string,\n    url:string\n}\nexport const GifGridItem = ({id,title,url}:Props) => {\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif';\n\nimport { GifGridItem } from './GifGridItem';\ninterface Props {\n    category:string\n}\n\nexport const GifGrid = ({category}:Props) => {\n/* const [images, setImages] = useState([])\n    useEffect(() => {\n        \n    }, [category]); */\n    const {data,loading} = useFetchGif(category);\n    \n\n\n    return (\n<>\n        <h3>{category}</h3>\n        <div className=\"card-grid\">\n          {loading && <h3>Cargando....</h3>}\n            {         \n        data.map((item:any) => \n         (\n                <GifGridItem\n                key={item.id} \n                {...item}\n                />\n           \n     \n            )\n            \n        )\n}\n    \n        </div>\n        </>     \n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGif } from \"../helpers/getGifs\";\n\n\nexport const useFetchGif = (category:string) => {\n\nconst [state,setState] = useState({\n    data:[],\n    loading:true\n}); \n        useEffect(() => {\n            \n            \n            getGif(category).then((imgs)=>{\n                setTimeout(()=>{\n\n                    setState({\n                        data:imgs,\n                        loading:false\n                    });\n                },3000);\n\n            });\n}, [])\n\nreturn state;\n\n}\n","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\ninterface Props {\n    \n}\n\nexport const GifExpertApp = (props: Props) => {\n    \n    const [categories, setCategories] = useState([\"one punch\",\"DBZ\"]);\n  /*   const handleAdd = () =>{\n\n        setCategories([...categories,\"Goku\"]);\n    } */\n    return (\n        <div>\n           \n            <AddCategory setCategories={setCategories} />\n            <ol>\n                {categories.map((category,i)=>\n\n                 <GifGrid category={category} key={category}/>\n                )}\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}